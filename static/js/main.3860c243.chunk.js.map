{"version":3,"sources":["components/Controls/Controls.module.css","components/Publication/Publication.module.css","components/Counter/Counter.module.css","components/Reader/Reader.module.css","components/Publication/Publication.js","components/Counter/Counter.js","components/Controls/Controls.js","components/Reader/Reader.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Publication","item","className","styles","publication","title","text","Counter","value","totalAmount","counter","Controls","disabledOne","onHandleForward","onHandleBack","disabledTwo","controls","onClick","type","disabledButton","button","Reader","props","HandleForward","setState","prevState","index","initialStep","state","items","HandleBack","bind","this","reader","length","Component","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,OAAS,yBAAyB,eAAiB,mC,wBCA3GD,EAAOC,QAAU,CAAC,YAAc,mC,gBCAhCD,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,OAAS,yB,mvgBCmBZC,MAhBf,YAAgC,IAATC,EAAQ,EAARA,KACrB,OACE,6BAASC,UAAWC,IAAOC,aACzB,4BAAKH,EAAKI,OACV,2BAAIJ,EAAKK,Q,iBCOAC,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAV,OACd,uBAAGP,UAAWC,IAAOO,SAClBF,EADH,IACWC,I,gBCmCEE,EArCE,SAAC,GAKX,IAJLC,EAII,EAJJA,YACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,aACAC,EACI,EADJA,YAEA,OACE,6BAASb,UAAWC,IAAOa,UACzB,4BACEC,QAAyB,SAAhBL,EAAyB,KAAOE,EACzCI,KAAK,SACLhB,UACkB,SAAhBU,EAAyBT,IAAOgB,eAAiBhB,IAAOiB,QAJ5D,kCASA,4BACEH,QAAyB,SAAhBF,EAAyB,KAAOF,EACzCK,KAAK,SACLhB,UACkB,SAAhBa,EAAyBZ,IAAOgB,eAAiBhB,IAAOiB,QAJ5D,0C,iBCdeC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAcRC,cAAgB,WACd,EAAKC,SAAS,SAACC,EAAWH,GAAZ,MAAuB,CACnCI,MAAOD,EAAUC,MAAQJ,EAAMK,YAC/BnB,MAAOiB,EAAUjB,MAAQc,EAAMK,gBAhBjC,EAAKC,MAAQ,CACXpB,MAAO,EACPkB,MAAO,EACPG,MAAO,EAAKP,MAAMO,OAGpB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBARD,E,0EAuBjBC,KAAKR,SAAS,SAACC,EAAWH,GAAZ,MAAuB,CACnCI,MAAOD,EAAUC,MAAQJ,EAAMK,YAC/BnB,MAAOiB,EAAUjB,MAAQc,EAAMK,iB,+BAIzB,IAAD,EACyBK,KAAKJ,MAA7BF,EADD,EACCA,MAAOG,EADR,EACQA,MAAOrB,EADf,EACeA,MAEtB,OACE,yBAAKN,UAAWC,IAAO8B,QACrB,kBAAC,EAAD,CAAahC,KAAM4B,EAAMH,KACzB,kBAAC,EAAD,CAASlB,MAAOA,EAAOmB,YAAa,EAAGlB,YAAaoB,EAAMK,SAC1D,kBAAC,EAAD,CACEtB,YAAuB,IAAVJ,EAAc,OAAS,QACpCO,YAAaP,IAAUqB,EAAMK,OAAS,OAAS,QAC/CpB,aAAckB,KAAKF,WACnBjB,gBAAiBmB,KAAKT,qB,GAzCIY,aAgDpCd,EAAOe,aAAe,CACpBT,YAAa,G,YCxCAU,E,2MAXbT,MAAQ,G,wEAGN,OACE,6BACE,kBAAC,EAAD,CAAQC,MAAOA,S,GANLM,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3860c243.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__1NW7I\",\"button\":\"Controls_button__3lg4n\",\"disabledButton\":\"Controls_disabledButton__WoquR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"publication\":\"Publication_publication__3lIWG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1V0N0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reader\":\"Reader_reader__CVeIo\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Publication.module.css';\n\nfunction Publication({ item }) {\n  return (\n    <article className={styles.publication}>\n      <h2>{item.title}</h2>\n      <p>{item.text}</p>\n    </article>\n  );\n}\n\nPublication.propTypes = {\n  item: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Publication;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Counter.module.css';\n\nconst Counter = ({ value, totalAmount }) => (\n  <p className={styles.counter}>\n    {value}/{totalAmount}\n  </p>\n);\n\nCounter.propTypes = {\n  totalAmount: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport default Counter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Controls.module.css';\n\nconst Controls = ({\n  disabledOne,\n  onHandleForward,\n  onHandleBack,\n  disabledTwo,\n}) => {\n  return (\n    <section className={styles.controls}>\n      <button\n        onClick={disabledOne === 'true' ? null : onHandleBack}\n        type=\"button\"\n        className={\n          disabledOne === 'true' ? styles.disabledButton : styles.button\n        }\n      >\n        Назад\n      </button>\n      <button\n        onClick={disabledTwo === 'true' ? null : onHandleForward}\n        type=\"button\"\n        className={\n          disabledTwo === 'true' ? styles.disabledButton : styles.button\n        }\n      >\n        Вперед\n      </button>\n    </section>\n  );\n};\n\nControls.propTypes = {\n  disabledOne: PropTypes.string.isRequired,\n  disabledTwo: PropTypes.string.isRequired,\n  onHandleBack: PropTypes.func.isRequired,\n  onHandleForward: PropTypes.func.isRequired,\n};\n\nexport default Controls;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Publication from '../Publication/Publication';\nimport Counter from '../Counter/Counter';\nimport Controls from '../Controls/Controls';\nimport styles from './Reader.module.css';\n\nexport default class Reader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 1,\n      index: 0,\n      items: this.props.items,\n    };\n\n    this.HandleBack = this.HandleBack.bind(this);\n  }\n\n  // PrevButton = () => {\n  //   this.setState(() =>({ one: true });\n  // };\n\n  HandleForward = () => {\n    this.setState((prevState, props) => ({\n      index: prevState.index + props.initialStep,\n      value: prevState.value + props.initialStep,\n    }));\n  };\n\n  HandleBack() {\n    this.setState((prevState, props) => ({\n      index: prevState.index - props.initialStep,\n      value: prevState.value - props.initialStep,\n    }));\n  }\n\n  render() {\n    const { index, items, value } = this.state;\n\n    return (\n      <div className={styles.reader}>\n        <Publication item={items[index]} />\n        <Counter value={value} initialStep={1} totalAmount={items.length} />\n        <Controls\n          disabledOne={value === 1 ? 'true' : 'false'}\n          disabledTwo={value === items.length ? 'true' : 'false'}\n          onHandleBack={this.HandleBack}\n          onHandleForward={this.HandleForward}\n        />\n      </div>\n    );\n  }\n}\n\nReader.defaultProps = {\n  initialStep: 1,\n};\n\nReader.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  initialStep: PropTypes.number,\n};\n","import React, { Component } from 'react';\nimport Reader from './Reader/Reader';\nimport items from './publications.json';\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div>\n        <Reader items={items} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}